{"poster":"CowZow","date":"2019-07-09T04:55:18.201+0000","title":"Dear TFT devs, here's a CS algorithm to improve your AI pathing","subforum":"Teamfight Tactics","up_votes":54,"down_votes":0,"body":"Dear TFT devs,\n\nI have a suggestion which can help improve the AI pathing of champions in TFT. It's called the [Hungarian Algorithm](https://en.wikipedia.org/wiki/Hungarian_algorithm).\n\nthe tl;dr for your devs is: create a bipartite graph with your champions matching champions with destinations; give each matching a score; then run the hungarian algorithm to maximize the sum of score - that is the optimal way champions should move each turn.\n\n**Problem statement**\n\nThere are times where the pathing messes up in the game. This is usually caused in the following situation: https://imgur.com/RkXtx8X\n\nThe optimal way for your green units to move is this: \nhttps://imgur.com/3T2Aoho\n\nHowever, sometimes your units move like this, which causes one guy to get stuck for a bit: \nhttps://imgur.com/ilxYeLh\n\n**How do you solve this?**\n\nIts easy, first convert the hexagon representation of the map into a \"graph\". A graph is something that creates relationships between objects called nodes. When you see the graph of the map you'll see it makes sense:\nhttps://imgur.com/WfuNz6J\n\nYou see that every champion is on the left side, and a line matches it to its possible destination on the right hand side. All the edges that connect champions with destinations moving closer to the enemy are marked with 1, destinations where the champion stay still is marked with 0, and destinations moving backwards is -1.\n\nSo with a graph like this, you want to match each champion with a destination. If you maximize the SUM of all the edges chosen, you will maximize the number of champions that moved towards an enemy each turn. The optimal assignment becomes this: https://imgur.com/hb0mxND\n\nAnd what algorithm solves maximizing the sum of edges? Hungarian algorithm.\n\nNot sure if this approach has been considered yet or works for the devs. But maybe this will help you towards an optimal solution.\n\nBest regards","replies":[{"poster":"KFCeytron","date":"2019-07-09T06:21:54.975+0000","up_votes":24,"down_votes":0,"body":"Keep in mind that the algorithm Riot chose for loading progress was to take the average of all players' load progress, giving us a jump to 90% followed by a slow crawl to 100% as the one guy on a toaster loads the game, rather than simply using the lowest individual number, which is what actually determines when the game loads. Your suggestion might be a bit too much for them.","replies":[]},{"poster":"Romans VI XXIII","date":"2019-07-09T14:16:48.715+0000","up_votes":5,"down_votes":0,"body":"Don't count on it, they cant even get Minion AI to work correctly, let alone a more intelligent AI for TFT.","replies":[]},{"poster":"DUDE BRO","date":"2019-07-09T05:43:47.068+0000","up_votes":4,"down_votes":2,"body":"How do you solve this?\nhttps://youtu.be/vBTtplzy_Gc?t=84","replies":[{"poster":"Porglit","date":"2019-07-09T13:10:20.887+0000","up_votes":5,"down_votes":0,"body":"> [{quoted}](name=DUDE BRO,realm=NA,application-id=RaE1aOE7,discussion-id=2XGYZLhB,comment-id=0000,timestamp=2019-07-09T05:43:47.068+0000)\n>\n> How do you solve this?\n> https://youtu.be/vBTtplzy_Gc?t=84\n\nI've found that this happens when other champions have died on the hexes between the champions.  In a sense, they're unable to find a way to the enemy because the dead champs still take up the hex, preventing them from finding a way to the enemy.  You'll notice that all the ranged champs will always attack, and only the melee champs are frozen.","replies":[{"poster":"DUDE BRO","date":"2019-07-10T05:05:37.244+0000","up_votes":2,"down_votes":0,"body":"> [{quoted}](name=Porglit,realm=NA,application-id=RaE1aOE7,discussion-id=2XGYZLhB,comment-id=00000000,timestamp=2019-07-09T13:10:20.887+0000)\n>\n> I've found that this happens when other champions have died on the hexes between the champions.  In a sense, they're unable to find a way to the enemy because the dead champs still take up the hex, preventing them from finding a way to the enemy.  You'll notice that all the ranged champs will always attack, and only the melee champs are frozen.\n\nGood catch, easily illustrated by Gnars pathing after pyke dies.","replies":[]}]}]},{"poster":"Porglit","date":"2019-07-09T13:08:49.442+0000","up_votes":3,"down_votes":0,"body":"This is perhaps the best post on the forums right now.","replies":[]},{"poster":"anjogrTest","date":"2019-07-11T18:38:23.660+0000","up_votes":1,"down_votes":0,"body":"This is an awesome post.  I noticed the pathing was wonky when I was doing the \"6 pieces\" quest with knights.  Thanks for putting this together, it was really interesting; just wanted to do my part to keep it at the top.\n\nSeparately, a shameless plug:  if you like mathy posts, you might want to check out this one, where I talk about the differing interactions between players and the RNG in LOL as opposed to TFT;  I'd love to hear what you guys all thought on the matter.\n\nhttps://boards.na.leagueoflegends.com/en/c/teamfight-tactics/HYxMA7TI-thoughts-from-a-cut-rate-mathematician-and-an-even-worse-gamer","replies":[]},{"poster":"UnstoppableMaybe","date":"2019-07-10T02:54:20.846+0000","up_votes":1,"down_votes":0,"body":"I don't have a problem with Riot personally, but I must admit it's a bit cowardly of them not to give this guy some credit here in the comments, for the amount of effort he put in here to help suggest a fix to the problem, even if the images were not his own for the solution lol! I usually find that the developers struggling to make profit on their games before being shutdown, usually they also don't recognize their fan-base that supports them, and they don't acknowledge their mvp supporters. I think it has to do with their egos making them think they can get away with more, and nobody else deserves personal credit unless they work on the game itself as well. It may seem selfish of them, but I can also understand the team rushing to get the projects done that they want, so no responding to comments on the web at all is always an option for them so nothing seems unfair to others, while avoiding progression interference. However, I do feel they can at least take some time to go through and recognize the very few who do post brilliant supportive suggestions few and far between, especially since they put in the time to share the support!\n\nI definitely agree that the minion AI can be a pain to navigate around, to a point where champion players are getting stuck in a crowded cluster of minions to where they start twitching like a mad glitch, and cannot move, which sometimes leads to their absurd death! This should be fixed asap as well, since it occurs in every mode of League of Legends, including ranked. The reason clearly being that the ally minions don't adjust their path, unless you are in the way, and when you are, it becomes obvious the assigned path and coding is sloppy to a point the ally minions are constantly in the champs way as the player navigates through their path. They need to get out of the way a little before the champion arrives, and not as soon as they arrive.\n\n Getting stuck in a cluster of minions sucks, and can be an easy fix if they add some new code to allow them to adjust just before champion arrival, instead of once they arrive. ","replies":[{"poster":"CowZow","date":"2019-07-10T15:02:01.166+0000","up_votes":1,"down_votes":0,"body":"Haha. Nah, it's not like that, it's okay if there is no response/reaction. I wanted to throw an idea out there just in case it was not considered before. I am not sure what the current algorithm being used is. I also dont know if what I suggested will even work for the existing code since it is sometimes difficult (and risky) to invest time in a new approach. \n\nBut I have seen similar problems like this before where you basically have multiple characters that need to move to different locations, and your characters might block each other when moving around. This is a strategy which comes up with moves that accommodates all your characters and runs pretty fast; it can work well.","replies":[{"poster":"The Djinn","date":"2019-07-10T22:35:34.165+0000","up_votes":1,"down_votes":0,"body":"> [{quoted}](name=CowZow,realm=NA,application-id=RaE1aOE7,discussion-id=2XGYZLhB,comment-id=00070000,timestamp=2019-07-10T15:02:01.166+0000)But I have seen similar problems like this before where you basically have multiple characters that need to move to different locations, and your characters might block each other when moving around. This is a strategy which comes up with moves that accommodates all your characters and runs pretty fast; it can work well.\n\nUnless I'm missing a component here, it doesn't seem to handle moving through each other especially well, especially when it comes to calculating the potential time lost to waiting vs. moving along a less optimal route. It also doesn't seem like it handles multiple units moving *not* in sync well, and TFT units only move in sync at the start of a map. Am I missing something in the implementation? Because it seems less efficient for this purpose than A-Star, even if in some situations it produces a slightly more optimal result.","replies":[{"poster":"CowZow","date":"2019-07-11T03:56:03.813+0000","up_votes":1,"down_votes":0,"body":"Nah not quite, A-star is not quite the right algorithm.\n\nThe main thing is that A-star is an algorithm which finds paths for units individually, one at a time and does not provide a 'coordinated' moveset for all units; i.e. a unit might have two equal paths to an enemy, however it should prioritize paths which do not block others units. A-star has no way of coordinating this information among multiple agents. The best AI needs to come up with a path that coordinates the movements of the units.\n\nThis algorithm is flexible and can accommodate both the cases you mention:\n\n* Calculating potential lost time to waiting vs moving along less optimal route: This should be done by modifying the scoring function of the edges. Imagine if the weights on the edge represented the minimum # of turns to get to an enemy (if a unit stays still, you can score it as the minimum turns it must wait before getting to an enemy). Then you run the matching algorithm to minimize the sum of all edges in your matching. You can see that the way to accomodate this is the scoring function of the edges.\n\n* Units move out of sync since they move at different speeds: This is solvable too. At every turn, just omit the units that don't move from the graph and force them to be assigned to their current cell. You don't have to run the algorithm for every unit each turn; only the ones that move.\n\nThe really important idea here is to realize that you can convert the state of the game (all the champions and their possible destinations) into a [bipartite graph with weighted edges](https://en.wikipedia.org/wiki/Bipartite_graph) as you saw in the images in the post. You set the weights on the edges to something like # of turns it takes to get to an enemy. Then you solve the Max/Min assignment problem with hungarian algorithm. The matching of champions to destinations that this algorithm produces will minimize the sum of turns of all units taken to get to an enemy.","replies":[]}]}]}]},{"poster":"The Djinn","date":"2019-07-10T00:39:17.047+0000","up_votes":1,"down_votes":0,"body":"I suspect that part of the reason this sort of thing isn't in use is that champions do *not* all move at the same times, and often have to move further than optimizing one square movements. As a result it might be more realistic to have each champion using its own movement algorithm (such as A-Star) that only applies when it's actively looking to move. This would lead to situations where a unit does identify path A and path B as equally valid and selects one of them under some situations (like the example you provided), but would likely be a better solution to other movement situations (as deciding destination squares won't help with pathing through multiple hexes that could be occupied, while A-Star or alternatives can).\n\nNow, could you implement some sort of system that has the benefits of both? Almost certainly. The question is what tradeoffs you need to make to do so.","replies":[]},{"poster":"Jennifer420","date":"2019-07-09T22:47:43.292+0000","up_votes":1,"down_votes":0,"body":"wow here i was ready to write some mean but 100% true comment about riots stupidity and their minion ai alone, but it alrdy was done. well rip.","replies":[]},{"poster":"Hellmaximus1","date":"2019-07-09T20:42:06.523+0000","up_votes":1,"down_votes":0,"body":"Lowkey, this is a really good roast against Riot's Game Devs","replies":[]}]}