{"poster":"TauntyArmordillo","date":"2015-07-09T22:39:47.857+0000","title":"The Ergonomics of Camera Panning and Proposal for an Alternative Mode (Edge-Pushing)","subforum":"Gameplay","up_votes":3,"down_votes":0,"body":"Currently, edge panning moves the camera at a fixed, user-defined velocity. This mode of panning has the advantage of requiring little motion to scroll long distances. However, for small adjustments, it is heavily reliant on practice to not over-scroll, or by reducing the preset scrolling speed. This may become tedious to get accustomed to, and some never do, instead relying on a combination of camera re-centering, semi-locked camera, or middle-click scrolling. Some give up on camera panning altogether and play in locked camera mode.\n\nFor middle-click drag-scroll, we have two options: the same fixed-velocity scrolling as edge panning (though it has the advantage of requiring less movement to activate -- it starts right on the spot when you press MB3), and a distance-controlled Inverted Drag Scroll. This latter mode is rather interesting, since being distance-controlled, the scrolling rate is naturally controlled by the user&#039;s motion. However, because the scrolling direction is inverted, it requires twice the motion for its intended motion if one wishes to pan beyond the held point. Thus it is generally more viable for a player to use a combination of these two modes in practice: inverted drag scroll for small adjustments, and fast edge-panning for larger distances. Even if the direction is reversed, which solves the back-and-forth problem, it is still sub-optimal, due of the nature of the activation. In the heat of battle, it is difficult to remember to middle-click first to reposition the camera, unless the user has had the protocol firmly imprinted into his habit (similar argument against everyday left-foot braking for safety considerations). One who is not yet accustomed would usually revert to edge-panning. \n\nThere can be a better way to do it, and we can find it by first breaking down the problem.\n\nWe can separate a mode of adjustment into two components: **means of activation**, and **mode of regulation**. \n**Means of activation** is exactly as the name suggests: how do you activate the camera scrolling? Currently the two ways of doing this are either holding or toggling a button (i.e. middle-click scroll/inverted drag-scroll), or touching the edge of the screen (a la edge-panning). The physical effort required between the two depends on the user and his setup, however it is clear that button-activation require an additional cognitive switch than edge-activation.\n\n**Mode of regulation** is how you control the motion. The current two options are fixed-velocity (e.g. edge-panning and regular middle-click scroll) and distance-based (e.g. inverted drag scroll). The former require little motion to produce movement, but has less precision, while the latter is more precise but require somewhat more motion.\n\nWe can also establish a set of criteria to evaluate different operations and requirements. First is the cognitive load of an operation, pertinent to the means of activation and is important if the operation is carried out frequently. If an operation require too much cognitive load, it cannot be viable as a **frequent** operation. The second criterion is the ease of control for the operation. This pertain to the mode of regulation; does a mode of regulation allow precise control easily? This is important if the scenario calls for precise adjustments. Our last criterion is the viable range, or how much motion it allows before becoming tedious to the user. This also pertains to the mode of regulation, and depends on the required motion of the operation.\n\nWe can summarize these criteria in a table:\n.............................................................................................\n| Requirement || Criterion............. || Applicable to........... |\n.............................................................................................\n| Frequency.... || Cognitive Load... || Means of Activation |\n| Precision...... || Ease of Control.. || Mode of Regulation |\n| Range........... || Required Motion || Mode of Regulation |\n.............................................................................................\n\nNow that we have our requirements and criteria established, lets look at our options.\n\nMeans of Activation:\n**Button-Activated** -- high cognitive load = good for **infrequent** operations\n**Edge-Activated** -- low cognitive load = good for **frequent** operations\n\nMode of Regulation:\n**Fixed-Velocity** -- low ease of control, minimal required motion = good for **long range**, _low precision_ operations\n**Distance-Controlled** -- high ease of control, large required motion = good for _short range_, **high precision** operations\n\nWe can pretty much separate real-world usage into two distinct scenarios: long-range panning and short-range adjustments. The former generally require low precision and are relatively infrequent, while the latter are almost always precise operations and are quite frequent. It is clear then that if we were to have two distinct modes of controlling the camera (separate from minimap clicking), button-activated fixed-velocity operation, which is basically middle-click scroll, is best for long range motion, while short range precise motions should be **edge-activated distance-controlled**. This clearly does not yet exist in this game, but what would it be like if it were implemented? Well, what this does is essentially make the whole map, both the area in view and out of view, accessible to the cursor directly. This is like playing with **the entire Summoner&#039;s Rift displayed on a giant monitor**, you only need to move your cursor to point to any location at any time. \n\nImagine that you are being chased up your mid-lane, new players often make the mistake of panning their camera all the way up that they see only the space they are escaping toward, and could not observe what the pursuer is doing. This is because accidentally touching the edge of the screen with the cursor causes the camera to move continuously in that direction, so the tendency is to leave sufficient space for clicking on the ground. If, instead of continuously moving the camera in the direction of the cursor, the camera only moves as much as your mouse moves, then it becomes much easier to keep the pursuer in view while still being able to click on the ground ahead, one only need to move their cursor as far as the location they are pointing at.\n\n---\n\n**TL;DR**: Add an \"Edge-Pushing\" mode so that the cursor pushes the camera the same distance as one would move their cursor, effectively eliminating the cognitive switch between \"I&#039;m controlling my cursor\" and \"I&#039;m controlling the camera\" when making small adjustments.","replies":[{"poster":"Lauki","date":"2015-07-09T22:56:10.506+0000","up_votes":2,"down_votes":1,"body":"wall of text 10/10 will read later when i can muster the feeling of wanting to read walls of text","replies":[]}]}